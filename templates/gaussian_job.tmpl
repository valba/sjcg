#!/bin/bash

###############################
#    SGE JOB Configuration    #
###############################
## Use the Bash shell (RECOMMENDED)
#$ -S /bin/bash

## Import enviroment variables (like $PWD, $USERNAME, $PATH, etc.) 
## (HIGHLY RECOMMENDED)
#$ -V

# Launch the job from the working directory (RECOMMENDED)
#$ -cwd

## Submit the job to a specific queue (RECOMMENDED)
#$ -q epsilon@compute-2-0

## Runtime limit
##$ -l h_rt=20000:00:00
## Shared RAM reservation
#$ -l h_vmem=10000M

## PARALLELIZATION ACTIVATION (MANDATORY FOR PARALLEL JOBS)
## PEV   = make, mpi, smp
## NPROC = Number of processors
#$ -pe mpi !__SGE-NUM-PROCESSORS__!

## SGE Job Name (OPTIONAL)
#$ -N !__SGE-JOB_NAME__!

## SGE Output Log (OPTIONAL)
#$ -o !__SGE-JOB_NAME__!.log

## SGE Error Log (OPTIONAL)
#$ -e error_!__SGE-JOB_NAME__!.log

## Merge SGE Output and Error Logs into a single file (OPTIONAL)                                      
#$ -j n

## Reserve required disk space in GB and choose between " " (>=100 -> partition1, <100 -> partition2)
## This option is only available for the following queues: ALPHA, BETA, and DELTA, which are the only ones with 2 scratch disks.
## For other queues, disk space will always be reserved in partition1, regardless of the value of DiskSpace. 
DiskSpace="50"

#########################
#    Commands to Run    #
#########################
## DO NOT MODIFY THE FOLLOWING LINE (it assigns which scratch disk to use)
source /usr/local/jobs/scratch.sh $DiskSpace


echo 
echo "01.- LOADING VARIABLES ..."
## SGE INPUT
## JOB_NAME (i.e. substance_method)
JOB_NAME=!__SGE-JOB_NAME__!

## SGE OUTPUT_DIR
## LOG (i.e. substance_method.log)
LOG="${JOB_NAME}.log"
## ELOG (i.e. error_substance_method.log)
ELOG="error_${JOB_NAME}.log"
## OUTPUT_DIR
OUTPUT_DIR="${SGE_O_WORKDIR}/${JOB_NAME}/${JOB_NAME}_${JOB_ID}"

## GAUSSIAN INPUT
GNAME=!__GAUSSIAN-JOB_NAME__!
## GAUSSIAN JOB FILE
GJF="${GNAME}.gjf"
## GAUSSIAN INITIAL CHECKPOINT FILE
OLDCHK="${GNAME}_old.chk"

## GAUSSIAN OUTPUT_DIR
GLOG="${GNAME}.log"
## GAUSSIAN FINAL CHECKPOINT FILE
CHKF="${GNAME}.chk"
## GAUSSIAN FINAL FORMATED CHECKPOINT FILE
FCHKF="${GNAME}.fchk"
## GAUSSIAN FINAL OLD-FORMATED CHECKPOINT FILE
FCHKF03="${GNAME}.03_fchk"
## GAUSSIAN READ-WRITE FILE
RWF="${GNAME}.rwf"
## GAUSSIAN SCRATCH DIRECTORY
#SCRATCH_DIR="${HOME}/SCRATCH" # Only for bigger than 2 TB scratch files if available. Slower Shared NFS Drive.  WARNING: IT MAY AFFECT OTHER USERS. USE IT WITH CARE AND PERMISSON !!!
SCRATCH_DIR="${TMPDIR}/SCRATCH" # Default location. Faster SSD Hard Drive. Highly recommended.
echo "... VARIABLES LOADED."

## SGE HISTORY 
SGE_HISTORY_JSON="${HOME}/.sge_history.json"
STARTING_TIME="$(date +"%Y-%m-%d %H:%M:%S")"
JOB_TYPE="GAUSSIAN"

## module unload MODULO_NO_DESEADO 
## module load MODULO_DESEADO


echo 
echo "02.- LOADING GAUSSIAN MODULE ..."
module use /share/modules
module load gaussian/g16_2021
echo "... GAUSSIAN MODULE LOADED."


echo 
echo "03.- CREATING SCRATCH DIRECTORY: ${SCRATCH_WORKDIR}"
echo "..."
SCRATCH_WORKDIR="${SCRATCH_DIR}/${JOB_NAME}_${JOB_ID}"
[ ! -d ${SCRATCH_WORKDIR} ] && mkdir -p ${SCRATCH_WORKDIR}
cp ${SGE_O_WORKDIR}/${GJF} ${SCRATCH_WORKDIR}
if [ -v OLDCHK ] ; then
    echo "Copying ${OLDCHK} to SCRATCH"
    cp ${SGE_O_WORKDIR}/${OLDCHK} ${SCRATCH_WORKDIR}
else
    echo "No initial Checkpoint file declared."
fi

cd ${SCRATCH_WORKDIR}
echo "... SCRATCH DIRECTORY CREATED."


echo 
echo "04.- LAUNCHING GAUSSIAN: "
echo "/share/bin/gaussian16 -y=${CHKF} -z=${RWF} -fchk=${FCHKF} < ${GJF} > >(tee ${SGE_O_WORKDIR}/${GLOG} ${GLOG} > /dev/null)"
echo "..."
/share/bin/gaussian16 -y=${CHKF} -z=${RWF} -fchk=${FCHKF} < ${GJF} > >(tee ${SGE_O_WORKDIR}/${GLOG} ${GLOG} > /dev/null)
echo "... GAUSSIAN LAUNCHED."


echo 
echo "05.- SAVING GAUSSIAN OUTPUT FILES IN ${SGE_O_WORKDIR}/${JOB_NAME}"
echo "..."
echo "Creating Gaussian03 FCHK as ${FCHKF03}"
/share/software-build/gaussian16/g16/formchk -2 ${OLDCHK} ${FCHKF03}
echo "Gaussian03 FCHK created"
[ ! -d ${SGE_O_WORKDIR}/${JOB_NAME} ] && mkdir -p ${SGE_O_WORKDIR}/${JOB_NAME}
mv ${SCRATCH_WORKDIR} ${OUTPUT_DIR}
echo "... GAUSSIAN OUTPUT FILES SAVED IN ${OUTPUT_DIR}"

echo 
echo "06.- SAVING SGE OUTPUT FILES IN ${OUTPUT_DIR}"
echo "..."
[ -f ${SGE_O_WORKDIR}/${LOG} ] && mv ${SGE_O_WORKDIR}/${LOG} ${OUTPUT_DIR}/
[ -f ${SGE_O_WORKDIR}/${ELOG} ] && mv ${SGE_O_WORKDIR}/${ELOG} ${OUTPUT_DIR}/
echo "... SGE OUTPUT FILES SAVED IN ${OUTPUT_DIR}"

echo 
echo "07.- SAVING SGE INPUT FILES IN ${OUTPUT_DIR}"
echo "..."
cp ${SGE_O_WORKDIR}/${JOB_NAME}.job ${OUTPUT_DIR}
echo "... SGE INPUT FILES SAVED IN ${OUTPUT_DIR}"
echo 

echo 
echo "08.- ANALYZING GAUSSIAN LOG ..."
GSTATUS="Not available"
if grep -q 'Normal termination' ${OUTPUT_DIR}/${GLOG}; then
    echo "Gaussian Normal termination"
    GSTATUS="Normal Termination"
else
    echo "Gaussian Error"
    GSTATUS="Error found"
    [ -f ${OUTPUT_DIR}/${GLOG} ] && mv ${OUTPUT_DIR}/${GLOG} ${OUTPUT_DIR}/"error_${GLOG}"
    echo "No Gaussian log file found"
fi
echo "... GAUSSIAN LOG ANALYZED."

echo "SGE JOB SUCCESSFULLY FINISHED!"

ENDING_TIME="$(date +"%Y-%m-%d %H:%M:%S")"

# Check if the SGE_HISTORY_JSON file exists
if [ ! -f "${SGE_HISTORY_JSON}" ]; then
  # If the file doesn't exist, create it and start with an opening bracket
  echo "[" > "${SGE_HISTORY_JSON}"
else
  # If the file exists, insert a comma to separate job records
  sed -i '$s/]/,/' "${SGE_HISTORY_JSON}"
fi

JOB_RECORD="{
\"JobID\": \"${JOB_ID}\",
\"StartingTimestamp\": \"${STARTING_TIME}\",
\"UserName\": \"${SGE_O_LOGNAME}\",
\"JobType\": \"${JOB_TYPE}\",
\"JobName\": \"${JOB_NAME}\",
\"InputDir\": \"${SGE_O_WORKDIR}\",
\"OutputDir\": \"${OUTPUT_DIR}\",
\"GaussianJobFile\": \"${GJF}\",
\"GaussianLogFile\": \"${GLOG}\",
\"GaussianStatus\": \"${GSTATUS}\",
\"SGELogFile\": \"${LOG}\",
\"EndingTimestamp\": \"${ENDING_TIME}\",
\"Node\": \"${HOSTNAME}\",
\"Queue\": \"${QUEUE}\",
\"NumProcessors\": \"${NSLOTS}\",
\"FrontEnd\": \"${SGE_O_HOST}\"
}"

# Append the job record and the closing bracket to the SGE_HISTORY_JSON file
echo "${JOB_RECORD}" >> "${SGE_HISTORY_JSON}"
echo "]" >> "${SGE_HISTORY_JSON}"
echo "${JOB_RECORD}" > ${OUTPUT_DIR}/job_record.json

# end of script
